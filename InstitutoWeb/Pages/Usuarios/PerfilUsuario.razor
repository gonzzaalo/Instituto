@page "/perfilusuario"
@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager
@inject IUsuarioService usuarioService

@inject SweetAlertService SweetAlert
@inject ILogger<PerfilUsuario> logger



<PageTitle>Perfil de Usuario</PageTitle>

@if (userFirebaseAuthenticate == null)
{
    <p><em>Cargando información del usuario...</em></p>
}
else
{
    <h3>Hola @userFirebaseAuthenticate.DisplayName</h3>
    @if(usuario==null&&tipoUsuario==0)
    {
        <p><em>Eres un nuevo usuario, necesitamos completar tu perfil selecciona el tipo de usuario que eres</em></p>
        <ListCardEnum EnumType="typeof(TipoUsuarioEnum)" TituloCard="Tipo de Usuario" OnSeleccionar="HandleSeleccionarTipoUsuario" />
    }
    else
    {
        <UsuarioData usuario="@usuario" usuarioFirebase="@userFirebaseAuthenticate" tipoUsuario="@tipoUsuario"/>
    }
           

}

@code {
    FirebaseUser? userFirebaseAuthenticate { get; set; } = null;
    Usuario? usuario { get; set; }

    TipoUsuarioEnum tipoUsuario { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        usuario = await usuarioService.GetUserByEmail(userFirebaseAuthenticate?.Email);
        //logger.LogInformation($"usuario={usuario?.PropertiesToString()}");

        AuthService.OnChangeLogin += ChequeoEstadoLogin;


    }
    public async void ChequeoEstadoLogin()
    {
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
        //si no hay usuario autenticado lo redirijo a la página de login
        if (userFirebaseAuthenticate == null)
        {
            NavigationManager.NavigateTo("/login");
        }
    }


    private async Task HandleSeleccionarTipoUsuario(Enum value)
    {
        if (value is TipoUsuarioEnum tipoUsuario)
        {
            this.tipoUsuario = tipoUsuario;
        }
    }

}
