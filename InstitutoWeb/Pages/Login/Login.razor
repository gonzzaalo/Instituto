@page "/login"
@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager 
@inject ILogger<Login> logger
@inject SweetAlertService SweetAlert
@inject UsuarioService usuarioService

@if (userFirebaseAuthenticate == null)
{
    <h3>Iniciar sesión</h3>

    <EditForm Model="usuario" OnValidSubmit="IniciarSesion">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="email">Email</label>
            <InputText class="form-control mb-2" type="text" @bind-Value="usuario.Email" />
        </div>
        <div class="form-group">
            <label for="clave">Contraseña</label>
            <InputText class="form-control mb-2" type="password" @bind-Value="usuario.Password" />
        </div>

        <div class="form-group">
            <label>Recordar Contraseña</label>
            <InputCheckbox @bind-Value="remenberPassword" />
        </div>

        <ValidationSummary />
        <button type="submit" class="btn btn-primary">Ingresar</button>
        <button class="btn btn-secondary" @onclick="Registrarse">Registrarse</button>

    </EditForm>
    <button class="btn btn-dark" @onclick="LoginGoogle">Google</button>
    <button class="btn btn-info" @onclick="LoginFacebook">Facebook</button>

    <button class="btn btn-dark" @onclick="ResetearPassword">Olvidé mi contraseña</button>

}
else
{
    <h1>Bienvenido @userFirebaseAuthenticate.DisplayName</h1>
    <button class="btn btn-primary" @onclick="CerrarSesion">Cerrar sesión</button>
}


@code {
    Usuario usuario { get; set; } = new Usuario();

    bool remenberPassword { get; set; } = false;

    FirebaseUser? userFirebaseAuthenticate { get; set; } = null;

    protected async override Task OnInitializedAsync()
    {
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();

        AuthService.OnChangeLogin += ChequeoEstadoLogin;

    }

    private async Task IniciarSesion()
    {
        LoginResponse response = await AuthService.SignInWithEmailPassword(usuario.Email, usuario.Password, remenberPassword);
        //logger.LogInformation($"la confirmación del email es igual a:{user.EmailVerified}");
        if (response.User == null)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error inicio de sesión",
                    Text = $"Error:{response.Error}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
        }
        else
        if (!response.User.EmailVerified)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Verificación de email",
                    Text = $"{response.User.DisplayName} Debe verificar su email para poder continuar",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
        }

        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
    }

    private async Task CerrarSesion()
    {
        await AuthService.SignOut();
        usuario = new Usuario();
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
    }

    private async Task Registrarse()
    {
        NavigationManager.NavigateTo("/registrarse");
    }

    private async Task LoginGoogle()
    {
        await AuthService.LoginWithGoogle();
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
    }

    private async Task LoginFacebook()
    {
        await AuthService.LoginWithFacebook();
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        StateHasChanged();
    }

    public async void ChequeoEstadoLogin()
    {
        userFirebaseAuthenticate = await AuthService.GetUserAuthenticated();
        // logger.LogInformation($"userFirebaseAuthenticate={userFirebaseAuthenticate.PropertiesToString()}");
        StateHasChanged();
        //si ya hay alguien autenticado lo envio al componente perfilUsuario
        if (userFirebaseAuthenticate != null)
        {
            NavigationManager.NavigateTo("/perfilusuario");
        }
    }

    public void Dispose()
    {
        AuthService.OnChangeLogin -= ChequeoEstadoLogin;
    }

    private async Task ResetearPassword()
    {
        if (!Helper.IsEmailValid(usuario.Email))
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Error, debe ingresar un email válido en el formulario, email=\"{usuario.Email}\"",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        var usuarioExistente = await usuarioService.GetUserByEmail(usuario.Email);
        if (usuarioExistente == null)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Error, no existe un usuario con el email {usuario.Email}",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        bool reseteo = await AuthService.SendPasswordResetEmail(usuario.Email);
        if (reseteo)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Se envió un email a {usuario.Email} para resetear la contraseña",
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
        }
        else
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Resetear contraseña",
                    Text = $"Error al enviar el email a {usuario.Email} para resetear la contraseña",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
        }

    }

}