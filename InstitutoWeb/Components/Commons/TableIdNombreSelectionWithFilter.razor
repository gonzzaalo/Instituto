﻿@inject ILogger<TableIdNombreSelectionWithFilter> Logger
@if(ListEntityFiltered == null)
{
    <p>Cargando...</p>
}
else
{
    <div class="form-group">
        <label for="filterText">Filtrar por nombre</label>
        <InputText id="filterText" class="form-control" @bind-Value="filterText"  @oninput="FilterList" placeholder="Filtrar por nombre" />
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in ListEntity)
            {
                <tr>
                    <td>@entity.Id</td>
                    <td>@entity.Nombre</td>
                    <td>
                        <button title="Seleccionar" class="btn btn-danger" @onclick="@(()=>HandleSeleccionar(entity))">Seleccionar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<IEntityIdNombre> ListEntity { get; set; }

    List<IEntityIdNombre> ListEntityFiltered { get; set; } = null;

    [Parameter]
    public EventCallback<IEntityIdNombre> OnSeleccionar { get; set; }

    string filterText = "";


    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnParametersSetAsync()
    {
        ListEntityFiltered = ListEntity.ToList();
        // Logger.LogInformation($"ListEntityFiltered count {ListEntityFiltered.Count}");
        // Logger.LogInformation($"ListEntity count {ListEntity.Count}");
    }

    private void HandleSeleccionar(IEntityIdNombre entity)
    {
        OnSeleccionar.InvokeAsync(entity);
    }

    private void FilterList(ChangeEventArgs e)
    {
        filterText = e.Value?.ToString() ?? string.Empty;
        // Logger.LogInformation($"Filtering by {filterText}");
        // Logger.LogInformation($"ListEntityFiltered count {ListEntityFiltered.Count}");
        // Logger.LogInformation($"ListEntity count {ListEntity.Count}");
        if (string.IsNullOrEmpty(filterText))
        {
            ListEntity = ListEntityFiltered;
        }
        else
        {
            ListEntity = ListEntityFiltered.Where(x => x.Nombre.ToLower().Contains(filterText.ToLower())).ToList();
        }
        StateHasChanged();
    }
}
