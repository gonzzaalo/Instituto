@inject IGenericService<Docente> docenteService
@inject IUsuarioService usuarioService
@inject SweetAlertService SweetAlert


@if(docentes==null)
{
    <p><em>Cargando información de los docentes...</em></p>
}
else
{
    <div class="form-group">
        <label for="docente">Password directivo:</label>
        <input type="password" class="form-control" @bind-value="PasswordDirectivo" />
    </div>
    <h4>Selecciona el docente</h4>
    <TableIdNombreSelectionWithFilter ListEntity="@(docentes.Cast<IEntityIdNombre>().ToList())" OnSeleccionar="HandleSeleccionarDocente" />
}


@code {


    [Parameter]
    public EventCallback<Docente> OnSeleccionarDocente { get; set; }
    List<Docente> docentes = new List<Docente>();
    public string PasswordDirectivo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        docentes = await docenteService.GetAllAsync();
        
    }
    private async Task HandleSeleccionarDocente(IEntityIdNombre docente)
    {
        if(PasswordDirectivo!="direISP20")
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Password incorrecto",
                    Text = $"El password del directivo es incorrecto",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }
        var usuario=await usuarioService.GetUserByDocente(docente.Id);
        if(usuario!=null)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Docente ya asignado",
                    Text = $"El docente ya tiene un usuario asignado, su nombre es {usuario.User} su email es {usuario.Email}",
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = false,
                    ConfirmButtonText = "Ok",
                });
            return;
        }else
            await OnSeleccionarDocente.InvokeAsync((Docente)docente);
    }
}