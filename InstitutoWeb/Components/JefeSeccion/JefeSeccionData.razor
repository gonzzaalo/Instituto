@inject IJefaturaSeccionService jefaturaSeccionService
@inject IGenericService<Carrera> carreraService
@inject ILogger<JefeSeccionData> logger

<div>
    <h4>Datos del Jefe de sección</h4>
    <p>Nombre: @docente.Nombre</p>
</div>

<button class="btn btn-primary" @onclick="()=>HandleInscribirseACarrera()">Seleccionar @tituloTableCarrera</button>
@if (jefaturasSecciones==null||jefaturasSecciones.Count==0)
{
    <p><em>Eres un nuevo usuario, necesitamos completar tu perfil selecciona la o las carreras en las que eres jefe de sección</em></p>
}
else
{
    <h4>@tituloTableCarrera en las que eres jefe de sección</h4>
   
    <table class="table">
        <tbody>
            @foreach (var jefatura in jefaturasSecciones)
            {
                <tr>
                    <td>@jefatura.Carrera.Nombre</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (seleccionarCarreras)
{
    <ListCardSelection ListEntity="@(carreras.Cast<IEntityIdNombre>().ToList())" TituloCard="Carreras" OnSeleccionar="HandleSeleccionarCarrera" />
}


@code {
    [Parameter]
    public Docente docente { get; set; }
    public List<JefaturaSeccion>? jefaturasSecciones { get; set; }
    bool seleccionarCarreras { get; set; }=false;
    List<Carrera> carreras { get; set; }
    string tituloTableCarrera => jefaturasSecciones?.Count > 1 ? "Carreras" : "Carrera";


    protected override async Task OnInitializedAsync()
    {
        carreras = await carreraService.GetAllAsync();
        jefaturasSecciones = await jefaturaSeccionService.GetByDocente(docente.Id);
        //logger.LogInformation(inscripcionesACarreras.Count().ToString());
        //marco las carreras que ya están inscriptas usando el campo Eliminado
        foreach (var carrera in carreras)
        {
            carrera.Eliminado = jefaturasSecciones.Any(i => i.CarreraId == carrera.Id);
        }


    }

    private void HandleInscribirseACarrera()
    {
        seleccionarCarreras = true;
        StateHasChanged();
    }

    private async Task HandleSeleccionarCarrera(List<IEntityIdNombre> listSelected)
    {
        //comparo listSelected con inscripcionesACarreras y dejo 2 nuevas listas, una con las carreras a agregar y otra con las carreras a eliminar


        foreach (var carreraSelected in listSelected)
        {
            if(!jefaturasSecciones.Any(i=>i.CarreraId==carreraSelected.Id))
                await jefaturaSeccionService.AddAsync(new JefaturaSeccion { DocenteId = docente.Id, CarreraId = carreraSelected.Id });
        }

        foreach (var jefaturas in jefaturasSecciones)
        {
            if (listSelected.All(c => c.Id != jefaturas.CarreraId))
                await jefaturaSeccionService.DeleteAsync(jefaturas.Id);
        }
        
        seleccionarCarreras = false;
        jefaturasSecciones = await jefaturaSeccionService.GetByDocente(docente.Id);
        
        StateHasChanged();
    }
}